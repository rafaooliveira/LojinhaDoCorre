var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.LazyLoad=t()}(this,function(){"use strict";var e={elements_selector:"img",container:document,threshold:300,data_src:"src",data_srcset:"srcset",class_loading:"loading",class_loaded:"loaded",class_error:"error",callback_load:null,callback_error:null,callback_set:null,callback_enter:null},t="data-",n=function(e,n){return e.getAttribute(t+n)},r=function(e,n,r){return e.setAttribute(t+n,r)},s=function(e){return e.filter(function(e){return!n(e,"was-processed")})},o=function(e,t){var n,r="LazyLoad::Initialized",s=new e(t);try{n=new CustomEvent(r,{detail:{instance:s}})}catch(o){n=document.createEvent("CustomEvent"),n.initCustomEvent(r,!1,!1,{instance:s})}window.dispatchEvent(n)},i=function(e,t){if(t.length)for(var n,r=0;n=t[r];r+=1)o(e,n);else o(e,t)},a=function(e,t){var r=t.data_srcset,s=e&&e.parentNode?e.parentNode:null;if((!s||"PICTURE"===s.tagName)&&s&&s.children&&s.children.length)for(var o,i=0;o=s.children[i];i+=1)if("SOURCE"===o.tagName){var a=n(o,r);a&&o.setAttribute("srcset",a)}},c=function(e,t){var r=t.data_src,s=t.data_srcset,o=e.tagName,i=n(e,r);if("IMG"===o){a(e,t);var c=n(e,s);return c&&e.setAttribute("srcset",c),void(i&&e.setAttribute("src",i))}return"IFRAME"===o?void(i&&e.setAttribute("src",i)):void(i&&(e.style.backgroundImage='url("'+i+'")'))},l="classList"in document.createElement("p"),u=function(e,t){return l?void e.classList.add(t):void(e.className+=(e.className?" ":"")+t)},d=function(e,t){return l?void e.classList.remove(t):void(e.className=e.className.replace(new RegExp("(^|\\s+)"+t+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,""))},f=function(e,t){e&&e(t)},v="load",_="error",m=function(e,t,n){e.removeEventListener(v,t),e.removeEventListener(_,n)},b=function(e,t){var n=function s(n){h(n,!0,t),m(e,s,r)},r=function o(r){h(r,!1,t),m(e,n,o)};e.addEventListener(v,n),e.addEventListener(_,r)},h=function(e,t,n){var r=e.target;d(r,n.class_loading),u(r,t?n.class_loaded:n.class_error),f(t?n.callback_load:n.callback_error,r)},p=function(e,t){f(t.callback_enter,e),["IMG","IFRAME"].indexOf(e.tagName)>-1&&(b(e,t),u(e,t.class_loading)),c(e,t),r(e,"was-processed",!0),f(t.callback_set,e)},y=function(t,n){this._settings=_extends({},e,t),this._setObserver(),this.update(n)};y.prototype={_setObserver:function(){var e=this;if("IntersectionObserver"in window){var t=this._settings,n=function(n){n.forEach(function(n){if(n.intersectionRatio>0){var r=n.target;p(r,t),e._observer.unobserve(r)}}),e._elements=s(e._elements)};this._observer=new IntersectionObserver(n,{root:t.container===document?null:t.container,rootMargin:t.threshold+"px"})}},update:function(e){var t=this,n=this._settings,r=e||n.container.querySelectorAll(n.elements_selector);return this._elements=s(Array.prototype.slice.call(r)),this._observer?void this._elements.forEach(function(e){t._observer.observe(e)}):(this._elements.forEach(function(e){p(e,n)}),void(this._elements=s(this._elements)))},destroy:function(){var e=this;this._observer&&(s(this._elements).forEach(function(t){e._observer.unobserve(t)}),this._observer=null),this._elements=null,this._settings=null}};var g=window.lazyLoadOptions;return g&&i(y,g),y});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
