!function(n,e){"function"==typeof define&&define.amd?define([],e):"undefined"!=typeof module&&module.exports?module.exports=e():n.lscache=e()}(this,function(){function n(){var n="__lscachetest__",t=n;if(void 0!==g)return g;try{if(!localStorage)return!1}catch(r){return!1}try{u(n,t),a(n),g=!0}catch(o){g=!(!e(o)||!localStorage.length)}return g}function e(n){return n&&("QUOTA_EXCEEDED_ERR"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name||"QuotaExceededError"===n.name)}function t(){return void 0===p&&(p=null!=window.JSON),p}function r(n){return n.replace(/[[\]{}()*+?.\\^$|]/g,"\\$&")}function o(n){return n+w}function i(){return Math.floor((new Date).getTime()/v)}function c(n){return localStorage.getItem(m+S+n)}function u(n,e){localStorage.removeItem(m+S+n),localStorage.setItem(m+S+n,e)}function a(n){localStorage.removeItem(m+S+n)}function f(n){for(var e=new RegExp("^"+m+r(S)+"(.*)"),t=localStorage.length-1;t>=0;--t){var i=localStorage.key(t);i=i&&i.match(e),i=i&&i[1],i&&i.indexOf(w)<0&&n(i,o(i))}}function l(n){var e=o(n);a(n),a(e)}function s(n){var e=o(n),t=c(e);if(t){var r=parseInt(t,y);if(i()>=r)return a(n),a(e),!0}}function h(n,e){x&&"console"in window&&"function"==typeof window.console.warn&&(window.console.warn("lscache - "+n),e&&window.console.warn("lscache - The error was: "+e.message))}function d(n){return Math.floor(864e13/n)}var g,p,m="lscache-",w="-cacheexpiration",y=10,v=6e4,E=d(v),S="",x=!1,_={set:function(r,s,d){if(!n())return!1;if(!t())return!1;try{s=JSON.stringify(s)}catch(g){return!1}try{u(r,s)}catch(g){if(!e(g))return h("Could not add item with key '"+r+"'",g),!1;var p,m=[];f(function(n,e){var t=c(e);t=t?parseInt(t,y):E,m.push({key:n,size:(c(n)||"").length,expiration:t})}),m.sort(function(n,e){return e.expiration-n.expiration});for(var w=(s||"").length;m.length&&w>0;)p=m.pop(),h("Cache is full, removing item with key '"+r+"'"),l(p.key),w-=p.size;try{u(r,s)}catch(g){return h("Could not add item with key '"+r+"', perhaps it's too big?",g),!1}}return d?u(o(r),(i()+d).toString(y)):a(o(r)),!0},get:function(e){if(!n())return null;if(s(e))return null;var r=c(e);if(!r||!t())return r;try{return JSON.parse(r)}catch(o){return r}},remove:function(e){n()&&l(e)},supported:function(){return n()},flush:function(){n()&&f(function(n){l(n)})},flushExpired:function(){n()&&f(function(n){s(n)})},setBucket:function(n){S=n},resetBucket:function(){S=""},getExpiryMilliseconds:function(){return v},setExpiryMilliseconds:function(n){v=n,E=d(v)},enableWarnings:function(n){x=n}};return _});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
