"use strict";!function(){function e(){try{return document.querySelectorAll(".builder-input")}catch(e){return console.error("builder.input.getAllInputs",e),[]}}function r(){try{for(var r=e(),n=r.length;n--;)t(r[n])}catch(u){console.error("builder.input.InitValidator",u)}}function t(e){try{if(e){window.freedom.addClass(e,"ns-maxlength");var r=e.getAttribute("supportedChars");switch(r){case"alphanumeric":window.freedom.addClass(e,"ns-only-letters");break;case"numeric":window.freedom.addClass(e,"ns-only-numbers")}window.freedom.nsPubSub.pub("restrictValue.restart",{})}}catch(t){console.error("builder.input.initValidate",t)}}function n(e){try{window.freedom.nsPubSub.pub("builder.input.inputed",e)}catch(r){console.error("builder.input.notifyInputedEvent",r)}}function u(){try{for(var r=e(),t=r.length;t--;)r[t].addEventListener("input",n)}catch(u){console.error("builder.input.InitInputListener",u)}}function i(e,r){return r+"|"+e}function o(){try{for(var r=e(),t=r.length,n="",u=0,o="";t--;)n=r[t].getAttribute("builder-input-sku"),u=r[t].getAttribute("builder-input-step"),o=i(n,u),l[o]={},l[o].value=r[t].value}catch(d){console.error("builder-combo.saveState",d)}}function d(){try{for(var r=e(),t=r.length,n="",u=0,o="";t--;)n=r[t].getAttribute("builder-input-sku"),u=r[t].getAttribute("builder-input-step"),o=i(n,u),l[o]&&(r[t].value=l[o].value)}catch(d){console.error("builder-combo.restoreState",d)}}var l={};window.freedom.nsPubSub.sub("color-flavor-size.changeHtml.before",o),window.freedom.nsPubSub.sub("builder-wrapper.after.rendered",d),window.freedom.nsPubSub.sub("builder-wrapper.after.rendered",r),window.freedom.nsPubSub.sub("builder-wrapper.after.rendered",u)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
