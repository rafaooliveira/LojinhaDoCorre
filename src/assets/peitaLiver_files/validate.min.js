!function(e,t,a){var r={messages:{required:"O campo %s é obrigatório.",matches:"Os campos %s e %s não são iguais.","default":"O campo %s ainda está configurado como padrão, por favor mude.",valid_email:"O campo %s não é um email válido.",valid_emails:"O campo %s precisa que todos os emails sejam válidos.",min_length:"O campo %s precisa ter pelo menos %s caracteres.",max_length:"O campo %s não deve exceder %s caracteres.",exact_length:"O campo %s precisa ter exatamente %s caracteres.",greater_than:"O campo %s precisa ser um número maior que %s.",less_than:"O campo %s precisa ser um número menor que %s.",alpha:"O campo %s precisa conter somente letras.",alpha_numeric:"O campo %s precisa conter somente letra ou número.",alpha_dash:"O campo %s precisa conter somente número, letra, traço e traço-inferior.",numeric:"O campo %s deve conter apenas números.",integer:"O campo %s deve conter apenasr valores inteiros.",decimal:"O campo %s deve cnoter apenas valores decimais.",is_natural:"O campo %s deve conter apenas números positivos.",is_natural_no_zero:"O campo %s deve conter um número maior que zero.",valid_ip:"O campo %s deve ser um IP válido.",valid_base64:"O campo %s deve conter um base64 válido.",valid_credit_card:"O campo %s deve ser um cartão de crédito válido.",is_file_type:"O campo %s deve conter apenas arquivos do(s) tipo(s) %s.",valid_url:"O campo %s deve ser uma URL válida.",greater_than_date:"O campo %s precisa ter uma data maior que %s.",less_than_date:"O campo %s precisa ter uma data menor que %s.",greater_than_or_equal_date:"O campo %s precisa ter uma data que é maior ou igual à %s.",less_than_or_equal_date:"O campo %s precisa ter uma data que é menor ou igual à %s."},callback:function(e){}},s=/^(.+?)\[(.+)\]$/,n=/^[0-9]+$/,i=/^\-?[0-9]+$/,o=/^\-?[0-9]*\.?[0-9]+$/,l=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,u=/^[a-z0-9]+$/i,d=/^[a-z0-9_\-]+$/i,c=/^[0-9]+$/i,p=/^[1-9][0-9]*$/i,h=/^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i,m=/[^a-zA-Z0-9\/\+=]/i,f=/^[\d\-\s]+$/,v=/^((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,_=/\d{4}-\d{1,2}-\d{1,2}/,g=function(e,t,s){this.callback=s||r.callback,this.errors=[],this.fields={},this.form=this._formByNameOrNode(e)||{},this.messages={},this.handlers={},this.conditionals={};for(var n=0,i=t.length;n<i;n++){var o=t[n];if((o.name||o.names)&&o.rules)if(o.names)for(var l=0,u=o.names.length;l<u;l++)this._addField(o,o.names[l]);else this._addField(o,o.name);else console.warn("validate.js: The following field is being skipped due to a misconfiguration:"),console.warn(o),console.warn("Check to ensure you have properly configured a name and rules for this field")}var d=this.form.onsubmit;this.form.onsubmit=function(e){return function(t){return e._validateForm(t)&&(d===a||null===d||d())}}(this)},y=function(e,t){var a;{if(!(e.length>0)||"radio"!==e[0].type&&"checkbox"!==e[0].type)return e[t];for(a=0,elementLength=e.length;a<elementLength;a++)if(e[a].checked)return e[a][t]}};g.prototype.setMessage=function(e,t){return this.messages[e]=t,this},g.prototype.setRules=function(e){this.fields={};for(var t=0,a=e.length;t<a;t++){var r=e[t];if((r.name||r.names)&&r.rules)if(r.names)for(var s=0,n=r.names.length;s<n;s++)this._addField(r,r.names[s]);else this._addField(r,r.name);else console.warn("validate.js: The following field is being skipped due to a misconfiguration:"),console.warn(r),console.warn("Check to ensure you have properly configured a name and rules for this field")}return this},g.prototype.registerCallback=function(e,t){return e&&"string"==typeof e&&t&&"function"==typeof t&&(this.handlers[e]=t),this},g.prototype.registerConditional=function(e,t){return e&&"string"==typeof e&&t&&"function"==typeof t&&(this.conditionals[e]=t),this},g.prototype._formByNameOrNode=function(e){return"object"==typeof e?e:t.forms[e]},g.prototype._addField=function(e,t){this.fields[t]={name:t,display:e.display||t,rules:e.rules,depends:e.depends,id:null,element:null,type:null,value:null,checked:null}},g.prototype._validateForm=function(e){this.errors=[];for(var t in this.fields)if(this.fields.hasOwnProperty(t)){var r=this.fields[t]||{},s=this.form[r.name];!s||s===a||s.disabled||s.readOnly||(r.id=y(s,"id"),r.element=s,r.type=s.length>0?s[0].type:s.type,r.value=y(s,"value"),r.checked=y(s,"checked"),r.depends&&"function"==typeof r.depends?r.depends.call(this,r)&&this._validateField(r):r.depends&&"string"==typeof r.depends&&this.conditionals[r.depends]?this.conditionals[r.depends].call(this,r)&&this._validateField(r):this._validateField(r))}return"function"==typeof this.callback&&this.callback(this.errors,e),this.errors.length>0&&(e&&e.preventDefault?e.preventDefault():event&&(event.returnValue=!1)),!0},g.prototype._validateField=function(e){var t,n,i=e.rules.split("|"),o=e.rules.indexOf("required"),l=!e.value||""===e.value||e.value===a;for(t=0,ruleLength=i.length;t<ruleLength;t++){var u=i[t],d=null,c=!1,p=s.exec(u);if((o!==-1||u.indexOf("!callback_")!==-1||!l)&&(p&&p.length&&(u=p[1]?p[1]:"",d=p[2]?p[2]:""),"!"===u.charAt(0)&&(u=u.substring(1,u.length)),"function"==typeof this._hooks[u]?this._hooks[u].apply(this,[e,d])||(c=!0):"callback_"===u.substring(0,9)&&(u=u.substring(9,u.length),"function"==typeof this.handlers[u]&&this.handlers[u].apply(this,[e.value,d,e])===!1&&(c=!0)),c)){var h=this.messages[e.name+"."+u]||this.messages[u]||r.messages[u],m="An error has occurred with the "+e.display+" field.";h&&(m=h.replace("%s",e.display),d&&(m=m.replace("%s",this.fields[d]?this.fields[d].display:d)));var f;for(n=0;n<this.errors.length;n+=1)e.id===this.errors[n].id&&(f=this.errors[n]);var v=f||{id:e.id,display:e.display,element:e.element,name:e.name,message:m,messages:[],rule:u};v.messages.push(m),f||this.errors.push(v)}}},g.prototype._getValidDate=function(e){if(!e.match("today")&&!e.match(_))return!1;var t,a=new Date;return e.match("today")||(t=e.split("-"),a.setFullYear(t[0]),a.setMonth(t[1]-1),a.setDate(t[2])),a},g.prototype._hooks={required:function(e){var t=e.value;return"checkbox"===e.type||"radio"===e.type?e.checked===!0:null!==t&&""!==t},"default":function(e,t){return e.value!==t},matches:function(e,t){var a=this.form[t];return!!a&&e.value===a.value},valid_email:function(e){return l.test(e.value)},valid_emails:function(e){for(var t=e.value.split(/\s*,\s*/g),a=0,r=t.length;a<r;a++)if(!l.test(t[a]))return!1;return!0},min_length:function(e,t){return!!n.test(t)&&e.value.length>=parseInt(t,10)},max_length:function(e,t){return!!n.test(t)&&e.value.length<=parseInt(t,10)},exact_length:function(e,t){return!!n.test(t)&&e.value.length===parseInt(t,10)},greater_than:function(e,t){return!!o.test(e.value)&&parseFloat(e.value)>parseFloat(t)},less_than:function(e,t){return!!o.test(e.value)&&parseFloat(e.value)<parseFloat(t)},alpha:function(e){return alphaRegex.test(e.value)},alpha_numeric:function(e){return u.test(e.value)},alpha_dash:function(e){return d.test(e.value)},numeric:function(e){return n.test(e.value)},integer:function(e){return i.test(e.value)},decimal:function(e){return o.test(e.value)},is_natural:function(e){return c.test(e.value)},is_natural_no_zero:function(e){return p.test(e.value)},valid_ip:function(e){return h.test(e.value)},valid_base64:function(e){return m.test(e.value)},valid_url:function(e){return v.test(e.value)},valid_credit_card:function(e){if(!f.test(e.value))return!1;for(var t=0,a=0,r=!1,s=e.value.replace(/\D/g,""),n=s.length-1;n>=0;n--){var i=s.charAt(n);a=parseInt(i,10),r&&(a*=2)>9&&(a-=9),t+=a,r=!r}return t%10===0},is_file_type:function(e,t){if("file"!==e.type)return!0;var a=e.value.substr(e.value.lastIndexOf(".")+1),r=t.split(","),s=!1,n=0,i=r.length;for(n;n<i;n++)a.toUpperCase()==r[n].toUpperCase()&&(s=!0);return s},greater_than_date:function(e,t){var a=this._getValidDate(e.value),r=this._getValidDate(t);return!(!r||!a)&&a>r},less_than_date:function(e,t){var a=this._getValidDate(e.value),r=this._getValidDate(t);return!(!r||!a)&&a<r},greater_than_or_equal_date:function(e,t){var a=this._getValidDate(e.value),r=this._getValidDate(t);return!(!r||!a)&&a>=r},less_than_or_equal_date:function(e,t){var a=this._getValidDate(e.value),r=this._getValidDate(t);return!(!r||!a)&&a<=r}},e.FormValidator=g}(window,document),"undefined"!=typeof module&&module.exports&&(module.exports=FormValidator);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
